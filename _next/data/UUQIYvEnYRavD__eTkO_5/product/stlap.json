{"pageProps":{"post":{"title":"Stlap: the STory LAnguage Processor","date":"2021-12-01T12:00:00.000Z","slug":"stlap","content":"<p>漫画シナリオをマークダウン風に書く言語。コメントなどプログラミングでは一般的だが小説執筆では一般的でない機能を提供している。\nまたフラグ管理機能でシーン同士の対応関係も保証されるようになっている。</p>\n<p>デモサイト: https://ohatakenji.gitlab.io/stlap-demo/</p>\n<ul>\n<li>開発期間: 2021/9 ~ 2021/12</li>\n<li>個人開発</li>\n<li>使用技術: TypeScript, Node, React, GitHub Actions, GitLab CI/CD</li>\n</ul>\n<p>シナリオ執筆用にiPadやパソコンでの作動を見越してCLIとWebの両方で動かせるようにできるTypeScriptを選んだ。\nVS Code用にシンタクックスハイライトを作成した。(https://marketplace.visualstudio.com/items?itemName=OhataKenji.stlap-vscode)\nシンタックスハイライトという概念はシナリオ執筆にはあまりない。</p>\n<h1>技術的な取り組み</h1>\n<h2>プレーンテキストベースであることについて</h2>\n<p>シナリオ作成用のソフトウェアは数多あるが、\nそのソフトウェア独自の拡張子でファイルを保存するものが多いため、\n今後のメンテナンス状況では使えなくなる危険性がある。</p>\n<p>プレーンテキストベースにすることで二度と開けないと言った状況や、\n移行しにくい、という状況を減らすことを狙った。</p>\n<h2>Tolerant Parser</h2>\n<p>StlapはLanguage Serverを作成すること(ひいてはVS Codeなどでの言語支援)\nを見越してTolerant Parserの考えを利用して実装しています。\nTolerant Parserはパース中にエラーが起きても出来るだけパースを続けるように振る舞います。\nこれによってコードのエラーがわかりやすくなります。</p>\n<h1>エピソード</h1>\n<p>当時Twitterを見すぎてしまうので使用時間を一日30分に制限していたが、TwitterTwitterのDMでStlapの営業する際にその制限を外したところ、それを言い訳に現在に至るまで無制限にTwitterをしてしまっている。</p>\n","ogImage":{"url":"/assets/product/stlap/cover.png"},"coverImage":"/assets/product/stlap/cover.png"}},"__N_SSG":true}